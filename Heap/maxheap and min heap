// min heapify
// //  void minHeapify(int i) 
// //     { 
// //     int lt = left(i); 
// //     int rt = right(i); 
// //     int smallest = i; 
// //     if (lt < size && arr[lt] < arr[i]) 
// //         smallest = lt; 
// //     if (rt < size && arr[rt] < arr[smallest]) 
// //         smallest = rt; 
// //     if (smallest != i) 
// //     { 
// //         swap(arr[i],arr[smallest]); 
// //         minHeapify(smallest); 
// //     } 
// //     }
    
// //     void buildHeap(){//O(n)....last node se first tk heapify .......
// //         for(int i=(size-2)/2;i>=0;i--)
// //             minHeapify(i);
// //     }

// max heapify
// void heapify(int arr[], int n, int i) 
// { 
// 	int largest = i; 
// 	int l = 2*i + 1; 
// 	int r = 2*i + 2;
// 	if (l < n && arr[l] > arr[largest])   //largest is i at present
// 		largest = l; 

// 	if (r < n && arr[r] > arr[largest]) 
// 		largest = r; 

// 	if (largest != i) 
// 	{ 
// 		swap(arr[i], arr[largest]); 
// 		heapify(arr, n, largest); 
// 	} 
// } 

// void buildheap(int arr[],int n){
//     for (int i = n / 2 - 1; i >= 0; i--) 
// 		heapify(arr, n, i);